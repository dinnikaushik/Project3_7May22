version: 2.1
  
orbs:
# Good for AWS CLI
 
  aws-cli: circleci/aws-cli@2.0.3


defaults: &defaults-node
  docker:
    - image: cimg/node:lts
  working_directory: ~/project
  
environment:
  AWS_PAGER: ""

commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters: 
      workflow_id:
        type: string
      event:
        type: string
           
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    <<: *defaults-node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
            cd dist
            ls -la
          # npm i webpack-sources
          # npm i webpack
          # npm i webpack-cli
          # npm i yargs
            
          # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build


  build-backend:
    <<: *defaults-node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i --force
            npm run --force build
            cd dist
            ls -la
          # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    parallelism: 4
    <<: *defaults-node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm i
            ls -la && cat coverage && cat tsconfig
            cat package.json
            npm run test
                
  test-backend:
    parallelism: 2
    <<: *defaults-node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm i 
            npm install --save-dev jest
            npm run test
  scan-frontend:
    parallelism: 2
    <<: *defaults-node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Vulnerability scan front-end
          command: |
            cd frontend
            npm audit --audit-level=critical --force
        
  scan-backend:
    parallelism: 2
    <<: *defaults-node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Vulnerability scan back-end 
          command: |
            cd backend
            npm audit --audit-level=critical --force

  deploy-infrastructure:
    
    # executor: aws-cli/default
    docker:
      - image: amazon/aws-cli:latest
    
    working_directory: .
    
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"\
              --tags project=udapeople  
              # exit 1

      - run:
          name: Ensure front-end infrastructure exist 
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name  "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople   
              # exit 1
      
      - run:
          name: Add back-end ip and URL to ansible inventory
          command: |
            # aws cloudformation describe-stacks \
            # --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            # # --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            # # --filters 'Name=tag:Name, Values="backend-${CIRCLE_WORKFLOW_ID:0:7}"' \
            # --query 'Stacks[].Outputs[*].[OutputKey,OutputValue][1][1]' \
            # # --query 'Stacks[0].Outputs[1].[OutputValue][0]' \
            # --no-paginate --output text >> ipaddress_outputs.txt
          
            # aws cloudformation describe-stacks \
            # --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            # # --filters 'Name=tag:Name, Values="backend-${CIRCLE_WORKFLOW_ID:0:7}"' \
            # # --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            # --query 'Stacks[].Outputs[*].[OutputKey,OutputValue][0][1]' \
            # # --query 'Stacks[0].Outputs[0].[OutputValue][0]' \
            # --no-paginate --output text >> urls_outputs.txt

            aws ec2 describe-instances \
            --filters 'Name=tag:Name, Values="backend-${CIRCLE_WORKFLOW_ID:0:7}"' \
            --query "Reservations[].Instances[0].InstanceId" \
            --no-paginate --output text > urls_outputs.txt

            aws ec2 describe-instances \
            --filters 'Name=tag:Name, Values="backend-${CIRCLE_WORKFLOW_ID:0:7}"' \
            --query "Reservations[].Instances[*].PublicIpAddress" \
            --no-paginate --output text >> ipaddress_outputs.txt
            
            ls -la
            cat ipaddress_outputs.txt
            cat urls_outputs.txt

            # list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            # --no-paginate --output text > ~/textfile.txt

      
      - persist_to_workspace:
          root: .
          paths:
            - ipaddress_outputs.txt
            - urls_outputs.txt
            
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
    
  download_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: 
          command: |
            pwd && ls -la
            cat ipaddress_outputs.txt
            cat urls_outputs.txt
            # cat ./.circleci/output3.txt   
            # cat .circleci/ansible/output4.txt 
            # cd .circleci/
            # ls -la 
       
      
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["67:f1:5d:1a:39:15:81:3f:8d:53:8e:3f:dc:a8:14:d4"]
      # attach workspace
      - attach_workspace:
          at: .

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            # exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            ansible-playbook -i inventory.txt main4.yml
            # exit 1
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
    steps:
      # Checkout code from git
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     # Here's where you will add some code to rollback on failure      

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
          # requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          # requires: [build-backend, build-frontend]
          filters:
            branches:
              only: [master]     
      - download_file:
          requires: [deploy-infrastructure]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]