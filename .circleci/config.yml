version: 2.1
  
orbs:
# Good for AWS CLI
 
  aws-cli: circleci/aws-cli@2.0.3


defaults: &defaults-node
  docker:
    - image: cimg/node:lts
  working_directory: ~/project
  
environment:
  AWS_PAGER: ""
  BACKEND_IP: AWS::EC2PublicIP

commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters: 
      workflow_id:
        type: string
      event:
        type: string
           
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            if ((curl -s http://udapeople-s3-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-west-1.amazonaws.com/ | grep "Hello"));
            then
            # SUCCESS = 1
            # if(( $SUCCESS==1 )); 
            # then
              cd ./project/backend
              npm install
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    <<: *defaults-node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
            cd dist
            ls -la
          # npm i webpack-sources
          # npm i webpack
          # npm i webpack-cli
          # npm i yargs
            
          # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build


  build-backend:
    <<: *defaults-node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i --force
            npm run --force build
            cd dist
            ls -la
          # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    parallelism: 4
    <<: *defaults-node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm i
            ls -la && cat coverage && cat tsconfig
            cat package.json
            npm run test
                
  test-backend:
    parallelism: 2
    <<: *defaults-node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm i 
            npm install --save-dev jest
            npm run test
  scan-frontend:
    parallelism: 2
    <<: *defaults-node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Vulnerability scan front-end
          command: |
            cd frontend
            npm audit --audit-level=critical --force
        
  scan-backend:
    parallelism: 2
    <<: *defaults-node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Vulnerability scan back-end 
          command: |
            cd backend
            npm audit --audit-level=critical --force

  deploy-infrastructure:
    
    # executor: aws-cli/default
    docker:
      - image: amazon/aws-cli:latest
    
    working_directory: ./
    
    steps:
      - checkout
      - run: yum install -y tar gzip tree
      - run: pwd && ls -la && cd .circleci && pwd && ls -la
      - run: 
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"\
              --tags project=udapeople  
              # exit 1

      - run:
          name: Ensure front-end infrastructure exist 
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name  "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople   
              # exit 1
      
      - run:
          name: Add back-end instance ID to file 
          command: |
            pwd
            aws ec2 describe-instances \
            --filters "Name=tag:Name,Values='backend-${CIRCLE_WORKFLOW_ID:0:7}'" \
            --query 'Reservations[*].Instances[*].InstanceId' \
            --no-paginate --output text >> .circleci/ansible/instance_id.txt
            pwd
            ls -la && cd .circleci/ansible/ && ls -la
            cat instance_id.txt
            
      - run:
          name: Add back-end IP to inventory.txt
          command: |
            pwd && ls -la 
            cd .circleci/ansible/ 
            echo [all] > inventory.txt
            aws ec2 describe-instances \
            --filters "Name=tag:Name,Values='backend-${CIRCLE_WORKFLOW_ID:0:7}'" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --no-paginate --output text >> inventory.txt
            pwd && ls -la
            cat inventory.txt
      
      - run:
          name: Add back-end PublicDNS address to file - backend_url.txt
          command: |
            pwd
            aws ec2 describe-instances \
            --filters "Name=tag:Name,Values='backend-${CIRCLE_WORKFLOW_ID:0:7}'" \
            --query 'Reservations[*].Instances[*].PublicDnsName' \
            --no-paginate --output text >> .circleci/ansible/backend_url.txt
            cd .circleci/ansible/ && ls -la 
            cat backend_url.txt
            tree
            
            
      - persist_to_workspace:
          root: ./
          paths:
            - .circleci/ansible/inventory.txt
            - .circleci/ansible/backend_url.txt
            
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
    
  download_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ./

      - run: 
          command: |
            pwd && ls -la
            cd .circleci/ansible/
            ls -la
            cat inventory.txt
            cat backend_url.txt
            
               
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.8-alpine3.14
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["67:f1:5d:1a:39:15:81:3f:8d:53:8e:3f:dc:a8:14:d4"]
      # attach workspace
      - attach_workspace:
          at: ./

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            # exit 1
      - run:
          name: Configure server S3
          command: |
            # Your code here
            pwd && ls -la
            cd .circleci/ansible && ls -la
            cat inventory.txt
            ansible-playbook -i inventory.txt main.yml
            # exit 1
      # Here's where you will add some code to rollback on failure 
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            # URL="http://udapeople-s3-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-1.amazonaws.com"
            URL="http://udapeople-s3-55b61c0.s3-website-us-west-1.amazonaws.com"
            # Test if website exists
            if curl -s ${URL} 
            then
              return 0
            else
              return 1
            fi   
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
         

  run-migrations:
    # Docker image here that supports NodeJS
    <<: *defaults-node
    steps:
    # Checkout code from git
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Run migrations
          command: |
            # Your code here
            npm i migrations
            cd backend
            npm run migrations 
            echo "has been executed successfully." >> migration.txt
            pwd & ls -la
            cat migration.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            pwd & ls -la
            cd backend
            pwd & ls -la
            cat migration.txt
            if grep -q "has been executed successfully." migration.txt
            then
              curl -H "Content-Type: text/plain" -H \
              "token: 130ac090-6749-4202-95d0-c1746a2dca81" --request PUT --data "1" \
              https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - persist_to_workspace:
          root: ./
          paths:
            - backend/migration.txt
     # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
  
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    
    steps:
      # Checkout code from git
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: |
            pwd & ls -la
            # yum install -y tar gzip
            # your code here

      - run:
          name: Get backend url
          command: |
            # your code here
            cd .circleci/ansible/ && ls -la
            cat inventory.txt
            aws ec2 describe-instances \
            # --filters "Name=tag:Code,Values='backend'" \
            # --filters "Name=tag:Name,Values='backend-${CIRCLE_WORKFLOW_ID:0:7}'" \
            --query "Reservations[*].Instances[0].PublicIpAddress" \
            --no-paginate \
            --output text >> inventory.txt
            # IPADDR=$EC2PublicIP
            # API_URL="http://${EC2PublicIP}:3030"
            # export API_URL="http://${BACKEND_IP}:3030"
            # echo "${API_URL}" >> inventory.txt
            # echo "${API_DNS_URL}"
            cat inventory.txt
      - persist_to_workspace:
          root: ./
          paths: 
            - .circleci/ansible/textfile.txt 
            - .circleci/ansible/inventory.txt
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            aws s3 sync ./frontend/ s3://udapeople-s3-55b61c0 --delete && \
            aws s3 sync ./index.html s3://udapeople-s3-55b61c0 --delete
      #       # aws s3 sync ./frontend/ s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete
#       # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail

  deploy-backend:
    docker:
      - image: python:3.8-alpine3.14
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["67:f1:5d:1a:39:15:81:3f:8d:53:8e:3f:dc:a8:14:d4"]
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd .circleci/ansible && ls -la
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
          # requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     # requires: [build-backend, build-frontend]
      #     filters:
      #       branches:
      #         only: [master]     
      # - download_file:
      #     requires: [deploy-infrastructure]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      - run-migrations
      #     requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
          context: aws
      - deploy-backend:
          requires: [deploy-frontend, run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]