version: 2.1
  
orbs:
# Good for AWS CLI
  aws-cli: circleci/aws-cli@2.0.6


defaults: &defaults-node
  docker:
    - image: cimg/node:lts
  working_directory: ~/project
  
environment:
  AWS_PAGER: ""
  BACKEND_IP: AWS::EC2PublicIP
  # ID: CIRCLE_WORKFLOW_ID:0:7

commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters: 
      workflow_id:
        type: string
      event:
        type: string
           
    steps:
      - run:
          name: Destroy environments
          when: on_fail   
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            if ((curl -s http://udapeople-s3-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-west-1.amazonaws.com/ | grep "Hello"));
            then
            # SUCCESS = 1
            # if(( $SUCCESS==1 )); 
            # then
              cd ./project/backend
              npm install
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migration:revert
            fi

  print_workflow_id:
    parameters:
      id:
        type: string
    steps:
      - run: echo << parameters.id >>    


jobs:

  build-frontend:
    # <<: *defaults-node
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      
      - run: echo ${CIRCLE_WORKFLOW_ID:0:7}

      # - print_workflow_id:
      #     id: <<pipeline.id>>

      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
            cd dist
            ls -la
            npm i webpack-sources
            npm i webpack
            npm i webpack-cli
            npm i yargs
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *defaults-node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend build
          command: |
            cd backend
            npm i --force
            npm run --force build
            cd dist
            ls -la
            # Zip the directory
            cd ../..
            pwd 
            ls -la
            tar -C backend -czvf backend-${CIRCLE_WORKFLOW_ID:0:7}.tar.gz .
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    # parallelism: 10
    # <<: *defaults-node
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm i
            npm run test
                
  test-backend:
    parallelism: 10
    # <<: *defaults-node
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm i 
            npm install --save-dev jest
            npm run test
  
  scan-frontend:
    parallelism: 2
    # <<: *defaults-node
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Vulnerability scan front-end
          command: |
            cd frontend
            npm i --force
            npm audit fix --audit-level=critical --force
            npm audit fix --force
        
  scan-backend:
    parallelism: 2
    # <<: *defaults-node
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Vulnerability scan back-end 
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
            npm audit fix --force

  deploy-infrastructure:
    # parallelism: 10
    # executor: aws-cli/default
    docker:
      - image: cimg/base:2022.01
    # working_directory: ./
    
    steps:
     
      - checkout
      - run: sudo apt-get update && sudo apt-get install -yy less
      - run:
          name: Install AWS CLI dependencies
          working_directory: ./
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run: 
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"\
              --tags project=udapeople  
              # exit 1

      - run:
          name: Ensure front-end infrastructure exist 
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name  "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople   
              # exit 1
     
            
      - run:
          name: Add back-end IP to inventory2.txt
          command: |
            cd .circleci/ansible/ 
            echo [backend] > inventory3.txt
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[0].PublicIpAddress" --no-paginate --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo $BACKEND_IP >> inventory3.txt
            # echo "http://${BACKEND_IP}:3030" >> inventory3.txt 
            
            # aws ec2 describe-instances \
            # --filters "Name=tag:Name,Values='backend-${CIRCLE_WORKFLOW_ID:0:7}'" \
            # --query 'Reservations[*].Instances[*].PublicIpAddress' \
            # --no-paginate --output text || >> inventory3.txt
            cat inventory3.txt
      
      - run:
          name: Add back-end PublicDNS address to file - backend_url.txt
          command: |
            aws ec2 describe-instances \
            --filters "Name=tag:Name,Values='backend-${CIRCLE_WORKFLOW_ID:0:7}'" \
            --query 'Reservations[*].Instances[*].PublicDnsName' \
            --no-paginate --output text >> .circleci/ansible/backend_url.txt
            cd .circleci/ansible/ && ls -la 
            cat backend_url.txt
           
      # - run:
      #     name: Add API URL inventory.txt
      #     command: |
      #       cd .circleci/ansible/ 
      #       pwd
      #       echo [backend] >> inventory.txt
      #       cat inventory.txt
      #       export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[0].PublicIpAddress" --no-paginate --output text)
      #       export API_URL="http://${BACKEND_IP}:3030"
      #       echo "http://${BACKEND_IP}:3030" >> inventory.txt      
      #       cat inventory.txt
       
      - persist_to_workspace:
          root: ./
          paths:
            - .circleci/ansible/inventory3.txt
            - .circleci/ansible/backend_url.txt
        
            
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
               
  configure-infrastructure:
    # parallelism: 10
    docker:
      # Docker image here that supports Ansible
      # - image: python:3.8-alpine3.14
      - image: cimg/base:2022.01
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["68:0f:db:17:bf:25:fe:73:5d:c0:88:c4:2a:73:50:dc"]
          
      # attach workspace
      - attach_workspace:
          at: ./

      - run:
          name: Install dependencies
          command: |
            echo -e '[defaults]\nhost_key_checking = false' > ansible.cfg
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install python
            sudo apt install ansible
            pwd && ls -la
            
            
      - run:
          name: Configure server
          command: |
            # Your code here
            pwd && ls -la
            cd .circleci/ansible && ls -la
            cat inventory3.txt
            ansible-playbook -i inventory3.txt configure-server.yml
            
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail

  smoke-test-web-site:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="http://udapeople-s3-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-1.amazonaws.com"
            # Test if website exists
            if curl -s ${URL} 
            then
              return 0
            else
              return 1
            fi   
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
         
  run-migrations:
    # Docker image here that supports NodeJS
    docker:
    - image: cimg/node:lts
    # <<: *defaults-node
    steps:
    # Checkout code from git
      - checkout
      - attach_workspace:
          at: ./
      - restore_cache:
          keys: [backend-build]
      # - run:
      #     name: Install AWS CLI dependencies
      #     working_directory: ./
      #     command: |
      #       sudo apt-get update && sudo apt-get install -yy less
      #       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #       unzip awscliv2.zip
      #       sudo ./aws/install
      # - run:
      #     name: Get backend url
      #     command: |
      #       cd .circleci/ansible/
      #       # aws ec2 describe-instances --query "Reservations[*].Instances[0].PublicIpAddress" --no-paginate --output text >> inventory.txt
      #       # BACKEND_IP=$(grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}" inventory.txt)
      #       export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[0].PublicIpAddress" --no-paginate --output text)
      #       export API_URL="http://${BACKEND_IP}:3030"
      #       cd ../.. && pwd
      #       ls -la
      #       # echo "API_URL = ${API_URL}"
      #       echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
      #       export API_URL="http://${BACKEND_IP}:3030"
      #       # echo "${API_URL}" >> inventory1.txt
      #       cd frontend && ls -la
      #       cat .env
           

      - run:
          name: Run DB migrations
          # working_directory: ./
          command: |
            # Your code here
            cd backend
            npm i migrations
            npm run migrations > migration.txt
            # export migration_status=$(cat migration.txt | grep -c "has been executed successfully")
            # # tar -zcvf ~/backend-${CIRCLE_WORKFLOW_ID:0:7}.tar.gz .
            pwd & ls -la
            cat migration.txt
     
      - run:
          name: Check migration results 
          command: |
            # Your code here
            pwd & ls -la
            cd backend
            pwd & ls -la
            cat migration.txt
            # if grep -q "has been executed successfully." migration.txt
            # then
            #   curl -H "Content-Type: text/plain" -H \
            #   "token: 130ac090-6749-4202-95d0-c1746a2dca81" --request PUT --data "1" \
            #   https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            # fi
      
      - persist_to_workspace:
          root: ./
          paths: 
            - .circleci/ansible/inventory3.txt
            - .circleci/ansible/api_url.txt
            - frontend/.env
            - backend/migration.txt

     # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
  
  build-new-frontend-and-backend:
    <<: *defaults-node
    steps:
    # Checkout code from git
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Build and zip frontend artifacts
          command: |
            cd frontend
            pwd && ls -la
            npm install
            npm run build
            ls -la
            tar -czvf frontend-${CIRCLE_WORKFLOW_ID:0:7}.tar.gz dist
            ls -la
      - run:
          name: Build and zip backend artifacts
          command: |
            cd backend 
            pwd && ls -la
            npm install
            npm run build
            cd ..
            tar -C backend -czvf backend-${CIRCLE_WORKFLOW_ID:0:7}.tar.gz .
            ls -la
            pwd
            mkdir .circleci/ansible/roles/deploy/files/
            cd .circleci/ansible/roles/deploy/files/
            cp /home/circleci/project/backend-${CIRCLE_WORKFLOW_ID:0:7}.tar.gz .
            
            
      - persist_to_workspace:
          root: ./
          paths: 
            - frontend/frontend-${CIRCLE_WORKFLOW_ID:0:7}.tar.gz
            - backend-${CIRCLE_WORKFLOW_ID:0:7}.tar.gz
            
            
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    
    steps:
      # Checkout code from git
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: |
            pwd && ls -la
            #yum install -y tar gzip
      - run:
          name: Copy new build with backend URL
          command: |
            # your code here
            cd frontend
            pwd && ls -la
            aws s3 sync dist s3://udapeople-s3-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws s3 ls s3://udapeople-s3-${CIRCLE_WORKFLOW_ID:0:7} --recursive | awk '{print $4}'
         
      - persist_to_workspace:
          root: ./
          paths: 
            - frontend/.env

            # aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      #       # aws s3 sync ./frontend/ s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

#       # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail

  deploy-backend:
    docker:
      - image: python:3.8-alpine3.14
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["67:f1:5d:1a:39:15:81:3f:8d:53:8e:3f:dc:a8:14:d4"]
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible
            # python get-pip.py
            # python -m pip install --upgrade pip
            # pip install tar gzip
      - run:
          name: Deploy backend
          command: |
            # your code here
            ls -la
            cp backend-${CIRCLE_WORKFLOW_ID:0:7}.tar.gz ./.circleci/ansible/roles/deploy/files/
            tar -cvzf backend-${CIRCLE_WORKFLOW_ID:0:7}.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ls -l roles/deploy/files
            ls -l roles/deploy/
            ansible-playbook -i inventory1.txt deploy-backend.yml
           
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail

  smoke-test:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            

      - run:
          name: Get backend url and test
          working_directory: ./frontend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[0].PublicIpAddress" --no-paginate --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo $API_URL
            curl "$API_URL/api/status"
            if curl "$API_URL/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            # 
            # URL="http://udapeople-s3-55b61c0.s3-website-us-west-1.amazonaws.com/#/employees"
            URL="http://udapeople-s3-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0 
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli 
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [scan-frontend]
      - scan-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [scan-backend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-backend,test-frontend]
          filters:
            branches:
              only: [master]   
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - build-new-frontend-and-backend:
          requires: [run-migrations]
      - deploy-frontend:
          requires: [run-migrations, build-new-frontend-and-backend]
      - deploy-backend:
          requires: [deploy-frontend, run-migrations]
      - smoke-test-web-site:
          requires: [deploy-backend, deploy-frontend]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]